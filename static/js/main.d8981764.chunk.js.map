{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TaskName","MentorstudentData","JSON","parse","stringify","LoadMentorData","TaskData","LoadTaskData","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","tbles","coltask","countColRow","bind","assertThisInitialized","handleChange","handleSubmit","LocaMentor","event","setState","target","preventDefault","localStorage","getItem","_this2","react_default","a","createElement","className","onSubmit","onClick","type","onChange","autoFocus","style","width","key","toLowerCase","tempitem","taskNamed","map","item","index","setItem","list","length","push","SortedList","bool","i","taskInfo","indexOf","backgroundColor","color","href","alert","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8981764.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport LoadMentorData from './Mentor-stud.json';\nimport LoadTaskData from './Stud-Task.json';\nlet TaskName = [\"Code Jam \\\"CV\\\"\",\"Code Jam \\\"CoreJS\\\"\", \"Code Jam \\\"DOM, DOM Events\\\"\", \"Markup #1\", \"RS Activist\", \"YouTube\", \"Code Jam \\\"Scoreboard\\\"\",\"Game\",\"Presentation\"];\nconst MentorstudentData = JSON.parse(JSON.stringify(LoadMentorData));\nconst TaskData = JSON.parse(JSON.stringify(LoadTaskData));\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: '' , tbles : '',coltask : ''};\nthis.countColRow = this.countColRow.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.LocaMentor = this.LocaMentor.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n  LocaMentor() {\n    this.setState({value: localStorage.getItem('Mentor')});\n  }\n  render() {\n    return (\n      <div className=\"App\" >\n        <header className=\"App-header\">\n        <form onSubmit={this.handleSubmit}>\n        <label>\n         Mentor:    \n          <input onClick = {this.LocaMentor} type=\"text\" value={this.state.value} onChange={this.handleChange} autoFocus />\n        </label>\n        <button type=\"submit\" onClick={() => {this.countColRow(this.state.value)}}>Search...</button>\n      </form>\n      <div className = \"TableTask\">\n      <table>\n        <th style={{ width: 300 }}>Task Names{this.state.coltask}</th>\n      {this.state.tbles}\n    </table>\n    </div>\n        </header>\n        <div className = \"FAQ\">\n        </div>\n      </div>\n    );\n  }\n  countColRow(value){\n    for (var key in TaskData) {\n      key = key.toLowerCase();\n    }\n    var tempitem;\n      var taskNamed = TaskName.map((item, index) => {\n        return <tr key={index}>{item}</tr>;});\n        this.setState({coltask:taskNamed});\n    if (typeof(MentorstudentData[value]) !== \"undefined\"){\n      localStorage.setItem('Mentor', value);\n      var list = MentorstudentData[value].map((item, index) => {\n        tempitem = item;\n        tempitem = \"https://github.com/\" + tempitem.toLowerCase();\n        if (typeof(TaskData[tempitem]) == \"undefined\") {\n          TaskData[tempitem] = [];\n           while (TaskData[tempitem].length < TaskName.length * 2 ) {\n            TaskData[tempitem].push(0);\n          }\n        }\n        if (typeof(TaskData[tempitem]) !== \"undefined\") {\n          while (TaskData[tempitem].length < TaskName.length * 2 ) {\n            TaskData[tempitem].push(0);\n          }\n          var SortedList = [];\n          var bool = false;\n           for (var i = 0; i < TaskName.length;i++){\n             for (var a = 0; a < TaskData[tempitem].length;a++){\n               if (TaskData[tempitem][a] == TaskName[i]){\n                 SortedList.push(TaskData[tempitem][a]);\n                 SortedList.push(TaskData[tempitem][a+1]);\n                 bool = true;\n                 break;\n               }\n               else bool = false;\n             }\n             if (bool == false) {\n              SortedList.push(0);\n              SortedList.push(0);\n             }\n           }\n           TaskData[tempitem] = SortedList;\n       var taskInfo = TaskData[tempitem].map((item, index) => {\n          if (index%2 !== 0){\n            if (TaskData[tempitem][index-1] == TaskName[TaskName.indexOf(TaskData[tempitem][index-1])]){\n              if (TaskData[tempitem][index-1] == \"RS Activist\" || TaskData[tempitem][index-1] == \"Game\") {\n                return <tr style={{ backgroundColor:\"#f4f44d\" }} key={index}></tr>;\n              }\n              else if (TaskData[tempitem][index-1] == \"YouTube\" ||  TaskData[tempitem][index-1] == \"Code Jam \\\"Scoreboard\\\"\" || TaskData[tempitem][index-1] == \"Markup #1\") {\n                return <tr style={{ backgroundColor:\"#FF69B4\" }} key={index}></tr>;\n              }\n              else if (TaskData[tempitem][index-1] == \"Presentation\") {\n                return <tr style={{ backgroundColor:\"#808080\" }} key={index}></tr>;\n              }\n              return <tr style={{ backgroundColor:\"#8CC152\" }} key={index}></tr>;}\n              else {\n                return <tr style={{ backgroundColor:\"#E9573F\",color:\"#000\" }} key={index}></tr>;}\n              }\n            });\n        }\n      return <th  key={index}><a href ={tempitem}>{item}</a>{taskInfo}</th>;\n    });\n    this.setState({tbles: list});\n    }\n    else alert(\"Такого ментора нету\");\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}